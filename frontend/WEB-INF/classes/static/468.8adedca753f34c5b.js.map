{"version":3,"mappings":"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","names":["i0","ctx_r3","ctx_r13","ctx_r15","ctx_r18","ctx_r20","ctx_r24","ctx_r29","ctx_r30","ReferenceFormComponent","cvService","configService","utilsService","substanceFormReferencesService","dialog","overlayContainerService","substanceFormService","m","this","EventEmitter","overlayContainer","getContainerElement","disableReferenceDocumentUpload","configData","subscriptions","forEach","subscription","unsubscribe","access","reference","tags","docType","citation","$$deletedCode","newUUID","uploadedFile","emitReferencesUpdate","deleteTimer","setTimeout","n","referenceDeleted","emit","clearTimeout","file","error","loading","uploadFile","subscribe","o","response","dialogRef","open","PreviousReferencesDialogComponent","data","width","style","zIndex","dialogSubscription","afterClosed","ref","fillReference","push","showPrev","deprecated","publicDomain","url","id","bypassUpdateCheck","window","selectors","ctx","ctx_r5","ctx_r10","ctx_r12","ctx_r14","SubstanceFormReferencesCardComponent","scrollToService","gaService","l","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","referencesSubscription","substanceReferences","references","filtered","searchSubscription","searchControl","valueChanges","filterList","value","console","log","page","pageChange","componentDestroyed","arguments","RefernceFormDialogComponent","newReference","doctype","addSubstanceReference","addedReference","scrollToElement","uuid","deleteSubstanceReference","SubstanceCardBaseFilteredList","SubstanceFormReferencesModule","p","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","ScrollToModule","MatIconModule","MatButtonModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule"],"sources":["./src/app/core/substance-form/references/reference-form.component.html","./src/app/core/substance-form/references/reference-form.component.ts","./src/app/core/substance-form/references/substance-form-references-card.component.html","./src/app/core/substance-form/references/substance-form-references-card.component.ts","./src/app/core/substance-form/references/substance-form-references.module.ts"],"sourcesContent":["<div class=\"reference-form-container\">\n  <div *ngIf=\"reference.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <app-cv-input required = 'true' class=\"source-type\" domain = 'DOCUMENT_TYPE'  title = \"Source Type\" [model] = \"reference.docType\"\n                  (valueChange)= \"reference.docType = $event\" name = \"docType\">\n    </app-cv-input>\n    <mat-form-field class=\"citation\">\n      <input matInput placeholder=\"Source Text/Citation\" [(ngModel)]=\"reference.citation\" required name=\"citation\" />\n    </mat-form-field>\n    <div class=\"checkbox-container\">\n      <mat-checkbox [(ngModel)]=\"reference.publicDomain\" name=\"publicDomain\">\n        Public Domain\n      </mat-checkbox>\n    </div>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"reference.access\">\n      </app-access-manager>\n    </div>\n  </div>\n  <div *ngIf=\"!reference.$$deletedCode\">\n    <div class=\"form-row\">\n      <mat-form-field class=\"url\">\n        <input matInput placeholder=\"URL\" [(ngModel)]=\"reference.url\" name=\"refUrl\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput placeholder=\"Source Id\" [(ngModel)]=\"reference.id\" name=\"refId\" />\n      </mat-form-field>\n      <app-tag-selector class=\"tags\" (tagsUpdate)=\"updateTags($event)\" [tags]=\"reference.tags\"\n        cvDomain=\"DOCUMENT_COLLECTION\"></app-tag-selector>\n    </div>\n    <div class=\"form-row form-actions\">\n      <div *ngIf=\"reference.uuid && !hideDelete\">\n        <button mat-button (click)=\"deleteReference()\">\n          <span>Delete</span>&nbsp;\n          <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"!(disableReferenceDocumentUpload || reference.uploadedFile)\">\n        <button mat-button ncatsFileSelect (selectedFile)=\"fileSelected($event)\">\n          <span>Upload Document</span>&nbsp;\n          <mat-icon svgIcon=\"cloud_upload\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"reference.uploadedFile\">\n        <button mat-button [matMenuTriggerFor]=\"documentMenu\">\n          Attachment\n          <mat-icon svgIcon=\"attachment\"></mat-icon>\n        </button>\n        <mat-menu #documentMenu=\"matMenu\">\n          <a mat-menu-item (click)=\"downloadDocument(reference.uploadedFile)\">Download</a>\n          <button mat-menu-item ncatsFileSelect (selectedFile)=\"fileSelected($event)\">Replace</button>\n          <button mat-menu-item (click)=\"reference.uploadedFile = null\">Delete</button>\n        </mat-menu>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === true\">\n        <div class = \"spinner-container\">\n            <mat-progress-spinner\n            class=\"progress-spinner spinner\"\n            [color]=\"primary\"\n            mode = \"indeterminate\">\n        </mat-progress-spinner>\n        </div>\n        \n      <span>Uploading</span>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === false && error === true\">\n          Error: There was a problem uploading this document\n        </div>\n      <div *ngIf=\"!reference.uuid\">\n          <button mat-button  (click)=\"showPrev = !showPrev\" matTooltip = \"use a previously submitted reference\">\n            <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n          </button>\n        </div>\n        <div *ngIf=\"reference.uuid && !reference.docType && !reference.citation\">\n            <button mat-button  (click)=\"openPreviousDialog()\" matTooltip = \"use a previously submitted reference\">\n              <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n            </button>\n          </div>\n      <span class=\"middle-fill\"></span>\n      <div *ngIf=\"reference.uuid\">\n        <app-apply-reference [subReferenceUuid]=\"reference.uuid\"></app-apply-reference>\n      </div>\n    </div>\n  </div>\n  <div class = \"form-row \" *ngIf = \"showPrev\" >\n    <app-previous-references class = \"previous-ref\" (selectedReference) = \"fillReference($event)\" ></app-previous-references>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"reference\"></app-audit-info>\n  </div>\n</div>\n","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { SubstanceReference } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ConfigService } from '../../config/config.service'\nimport { UtilsService } from '../../utils/utils.service';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { SubstanceFormReferencesService } from './substance-form-references.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PreviousReferencesDialogComponent } from '@gsrs-core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-reference-form',\n  templateUrl: './reference-form.component.html',\n  styleUrls: ['./reference-form.component.scss']\n})\nexport class ReferenceFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() reference: SubstanceReference;\n  @Output() referenceDeleted = new EventEmitter<SubstanceReference>();\n  @Input() hideDelete = false;\n  private overlayContainer: HTMLElement;\n  deleteTimer: any;\n  disableReferenceDocumentUpload = false;\n  showPrev = false;\n  loading = false;\n  error = false;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private configService: ConfigService,\n    private utilsService: UtilsService,\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.disableReferenceDocumentUpload = this.configService.configData.disableReferenceDocumentUpload;\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.reference.access = access;\n  }\n\n  updateTags(tags: Array<string>): void {\n    this.reference.tags = tags;\n  }\n\n  get isValid(): boolean {\n    if (this.reference.docType\n      && this.reference.citation) {\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteReference(): void {\n    this.reference.$$deletedCode = this.utilsService.newUUID();\n    if (!this.reference.docType\n      && !this.reference.citation\n      && !this.reference.uploadedFile\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.referenceDeleted.emit(this.reference);\n      }, 2000);\n    } else {\n      this.substanceFormReferencesService.emitReferencesUpdate();\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.reference.$$deletedCode;\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  fileSelected(file: File): void {\n    this.error = false;\n    if (file != null) {\n      this.loading = true;\n      this.utilsService.uploadFile(file).subscribe(response => {\n        this.reference.uploadedFile = response;\n        this.loading = false;\n\n      }, error => {\n        this.loading = false;\n        this.error = true;\n\n      });\n    }\n  }\n\n  openPreviousDialog(): void {\n      const dialogRef = this.dialog.open(PreviousReferencesDialogComponent, {\n        data: {},\n        width: '990px'\n      });\n      this.overlayContainer.style.zIndex = '1002';\n      const dialogSubscription = dialogRef.afterClosed().subscribe(ref => {\n        this.overlayContainer.style.zIndex = null;\n       if (ref) {\n         if (ref.citation && ref.citation !== '' && ref.docType && ref.docType !== '') {\n          this.fillReference(ref);\n        }\n       }\n      });\n      this.subscriptions.push(dialogSubscription);\n    }\n\n    fillReference(ref: SubstanceReference) {\n      this.showPrev = false;\n      this.reference.access = ref.access;\n      this.reference.citation = ref.citation;\n      this.reference.deprecated = ref.deprecated;\n      this.reference.docType = ref.docType;\n      this.reference.publicDomain = ref.publicDomain;\n      this.reference.tags = ref.tags;\n      this.reference.uploadedFile = ref.uploadedFile;\n      this.reference.url = ref.url || null;\n      this.reference.id = ref.id || null;\n    }\n\n  downloadDocument(url: string): void {\n    this.substanceFormService.bypassUpdateCheck();\n    window.open(url);\n  }\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"references && references.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addSubstanceReference()\">\n    Add reference <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"reference\" *ngFor=\"let reference of paged; last as isLast\" [id]=\"reference.uuid\" appScrollToTarget>\n  <app-reference-form [reference]=\"reference\" (referenceDeleted)=\"deleteReference($event)\"></app-reference-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n<div *ngIf = \"references && references.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addSubstanceReference()\">\n        Add reference <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button> \n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RefernceFormDialogComponent } from './references-dialogs/refernce-form-dialog.component';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { SubstanceFormReferencesService } from './substance-form-references.service';\n\n@Component({\n  selector: 'app-substance-form-references-card',\n  templateUrl: './substance-form-references-card.component.html',\n  styleUrls: ['./substance-form-references-card.component.scss']\n})\nexport class SubstanceFormReferencesCardComponent extends SubstanceCardBaseFilteredList<SubstanceReference>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  references: Array<SubstanceReference>;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n\n  constructor(\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n    private overlayContainerService: OverlayContainer\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form references';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('References');\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  ngAfterViewInit() {\n    const referencesSubscription = this.substanceFormReferencesService.substanceReferences.subscribe(references => {\n      this.references = references;\n      this.filtered = references;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.references, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(referencesSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  openReferenceFormDialog(reference: SubstanceReference = { access: [] }): void {\n\n    const dialogRef = this.dialog.open(RefernceFormDialogComponent, {\n      data: reference,\n      width: '900px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newReference => {\n      this.overlayContainer.style.zIndex = null;\n      if (newReference != null && newReference.doctype && newReference.citation) {\n        this.substanceFormReferencesService.addSubstanceReference(newReference);\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  addItem(): void {\n    this.addSubstanceReference();\n  }\n\n  addSubstanceReference(): void {\n    const addedReference = this.substanceFormReferencesService.addSubstanceReference({});\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(addedReference.uuid, 'center');\n    }, 10);\n  }\n\n  deleteReference(reference: SubstanceReference): void {\n    this.substanceFormReferencesService.deleteSubstanceReference(reference);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormReferencesCardComponent } from './substance-form-references-card.component';\nimport { DynamicComponentLoaderModule } from '@gsrs-core/dynamic-component-loader';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ScrollToModule } from '@gsrs-core/scroll-to';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {ReferenceFormComponent} from \"./reference-form.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormReferencesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    ScrollToModule,\n    MatIconModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule\n  ],\n  exports:[\n    ReferenceFormComponent,\n  ],\n  declarations: [\n    SubstanceFormReferencesCardComponent,\n    ReferenceFormComponent\n  ]\n})\nexport class SubstanceFormReferencesModule { }\n"],"sourceRoot":"webpack:///","file":"468.8adedca753f34c5b.js"}