{"version":3,"mappings":"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","names":["PreviousReferencesDialogComponent","dialogRef","this","close","ref","i0","selectors","ctx","ctx_r3","ctx_r13","ctx_r15","ctx_r18","ctx_r20","ctx_r24","ctx_r29","ctx_r30","ReferenceFormComponent","cvService","configService","utilsService","substanceFormReferencesService","dialog","overlayContainerService","substanceFormService","m","EventEmitter","overlayContainer","getContainerElement","disableReferenceDocumentUpload","configData","subscriptions","forEach","subscription","unsubscribe","access","reference","tags","docType","citation","$$deletedCode","newUUID","uploadedFile","emitReferencesUpdate","deleteTimer","setTimeout","n","referenceDeleted","emit","clearTimeout","file","error","loading","uploadFile","subscribe","o","response","open","data","width","style","zIndex","dialogSubscription","afterClosed","fillReference","push","showPrev","deprecated","publicDomain","url","id","bypassUpdateCheck","window","ctx_r5","ctx_r10","ctx_r12","ctx_r14","SubstanceFormReferencesCardComponent","scrollToService","gaService","l","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","referencesSubscription","substanceReferences","references","filtered","searchSubscription","searchControl","valueChanges","filterList","value","console","log","page","pageChange","componentDestroyed","arguments","RefernceFormDialogComponent","newReference","doctype","addSubstanceReference","addedReference","scrollToElement","uuid","deleteSubstanceReference","SubstanceCardBaseFilteredList","SubstanceFormReferencesModule","p","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","ScrollToModule","MatIconModule","MatButtonModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule"],"sources":["./src/app/core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component.ts","./src/app/core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component.html","./src/app/core/substance-form/references/reference-form.component.html","./src/app/core/substance-form/references/reference-form.component.ts","./src/app/core/substance-form/references/substance-form-references-card.component.html","./src/app/core/substance-form/references/substance-form-references-card.component.ts","./src/app/core/substance-form/references/substance-form-references.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\n\n@Component({\n  selector: 'app-previous-references-dialog',\n  templateUrl: './previous-references-dialog.component.html',\n  styleUrls: ['./previous-references-dialog.component.scss']\n})\nexport class PreviousReferencesDialogComponent implements OnInit {\n\n  constructor(    public dialogRef: MatDialogRef<PreviousReferencesDialogComponent>,\n  ) { }\n\n  ngOnInit() {\n  }\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  fillReference(ref: SubstanceReference) {\n    this.dialogRef.close(ref);\n  }\n}\n","<div mat-dialog-title>\n        <h1>Select Previously Used Reference</h1>\n</div>\n<div mat-dialog-content>\n  <app-previous-references (selectedReference) = \"fillReference($event)\" ></app-previous-references>\n</div>\n<div mat-dialog-actions>\n        <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"cancel()\">Cancel</button>\n</div>","<div class=\"reference-form-container\">\n  <div *ngIf=\"reference.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <app-cv-input required = 'true' class=\"source-type\" domain = 'DOCUMENT_TYPE'  title = \"Source Type\" [model] = \"reference.docType\"\n                  (valueChange)= \"reference.docType = $event\" name = \"docType\">\n    </app-cv-input>\n    <mat-form-field class=\"citation\">\n      <input matInput placeholder=\"Source Text/Citation\" [(ngModel)]=\"reference.citation\" required name=\"citation\" />\n    </mat-form-field>\n    <div class=\"checkbox-container\">\n      <mat-checkbox [(ngModel)]=\"reference.publicDomain\" name=\"publicDomain\">\n        Public Domain\n      </mat-checkbox>\n    </div>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"reference.access\">\n      </app-access-manager>\n    </div>\n  </div>\n  <div *ngIf=\"!reference.$$deletedCode\">\n    <div class=\"form-row\">\n      <mat-form-field class=\"url\">\n        <input matInput placeholder=\"URL\" [(ngModel)]=\"reference.url\" name=\"refUrl\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput placeholder=\"Source Id\" [(ngModel)]=\"reference.id\" name=\"refId\" />\n      </mat-form-field>\n      <app-tag-selector class=\"tags\" (tagsUpdate)=\"updateTags($event)\" [tags]=\"reference.tags\"\n        cvDomain=\"DOCUMENT_COLLECTION\"></app-tag-selector>\n    </div>\n    <div class=\"form-row form-actions\">\n      <div *ngIf=\"reference.uuid && !hideDelete\">\n        <button mat-button (click)=\"deleteReference()\">\n          <span>Delete</span>&nbsp;\n          <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"!(disableReferenceDocumentUpload || reference.uploadedFile)\">\n        <button mat-button ncatsFileSelect (selectedFile)=\"fileSelected($event)\">\n          <span>Upload Document</span>&nbsp;\n          <mat-icon svgIcon=\"cloud_upload\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"reference.uploadedFile\">\n        <button mat-button [matMenuTriggerFor]=\"documentMenu\">\n          Attachment\n          <mat-icon svgIcon=\"attachment\"></mat-icon>\n        </button>\n        <mat-menu #documentMenu=\"matMenu\">\n          <a mat-menu-item (click)=\"downloadDocument(reference.uploadedFile)\">Download</a>\n          <button mat-menu-item ncatsFileSelect (selectedFile)=\"fileSelected($event)\">Replace</button>\n          <button mat-menu-item (click)=\"reference.uploadedFile = null\">Delete</button>\n        </mat-menu>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === true\">\n        <div class = \"spinner-container\">\n            <mat-progress-spinner\n            class=\"progress-spinner spinner\"\n            [color]=\"primary\"\n            mode = \"indeterminate\">\n        </mat-progress-spinner>\n        </div>\n        \n      <span>Uploading</span>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === false && error === true\">\n          Error: There was a problem uploading this document\n        </div>\n      <div *ngIf=\"!reference.uuid\">\n          <button mat-button  (click)=\"showPrev = !showPrev\" matTooltip = \"use a previously submitted reference\">\n            <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n          </button>\n        </div>\n        <div *ngIf=\"reference.uuid && !reference.docType && !reference.citation\">\n            <button mat-button  (click)=\"openPreviousDialog()\" matTooltip = \"use a previously submitted reference\">\n              <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n            </button>\n          </div>\n      <span class=\"middle-fill\"></span>\n      <div *ngIf=\"reference.uuid\">\n        <app-apply-reference [subReferenceUuid]=\"reference.uuid\"></app-apply-reference>\n      </div>\n    </div>\n  </div>\n  <div class = \"form-row \" *ngIf = \"showPrev\" >\n    <app-previous-references class = \"previous-ref\" (selectedReference) = \"fillReference($event)\" ></app-previous-references>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"reference\"></app-audit-info>\n  </div>\n</div>\n","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { SubstanceReference } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ConfigService } from '../../config/config.service'\nimport { UtilsService } from '../../utils/utils.service';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { SubstanceFormReferencesService } from './substance-form-references.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PreviousReferencesDialogComponent } from '@gsrs-core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-reference-form',\n  templateUrl: './reference-form.component.html',\n  styleUrls: ['./reference-form.component.scss']\n})\nexport class ReferenceFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() reference: SubstanceReference;\n  @Output() referenceDeleted = new EventEmitter<SubstanceReference>();\n  @Input() hideDelete = false;\n  private overlayContainer: HTMLElement;\n  deleteTimer: any;\n  disableReferenceDocumentUpload = false;\n  showPrev = false;\n  loading = false;\n  error = false;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private configService: ConfigService,\n    private utilsService: UtilsService,\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.disableReferenceDocumentUpload = this.configService.configData.disableReferenceDocumentUpload;\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.reference.access = access;\n  }\n\n  updateTags(tags: Array<string>): void {\n    this.reference.tags = tags;\n  }\n\n  get isValid(): boolean {\n    if (this.reference.docType\n      && this.reference.citation) {\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteReference(): void {\n    this.reference.$$deletedCode = this.utilsService.newUUID();\n    if (!this.reference.docType\n      && !this.reference.citation\n      && !this.reference.uploadedFile\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.referenceDeleted.emit(this.reference);\n      }, 2000);\n    } else {\n      this.substanceFormReferencesService.emitReferencesUpdate();\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.reference.$$deletedCode;\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  fileSelected(file: File): void {\n    this.error = false;\n    if (file != null) {\n      this.loading = true;\n      this.utilsService.uploadFile(file).subscribe(response => {\n        this.reference.uploadedFile = response;\n        this.loading = false;\n\n      }, error => {\n        this.loading = false;\n        this.error = true;\n\n      });\n    }\n  }\n\n  openPreviousDialog(): void {\n      const dialogRef = this.dialog.open(PreviousReferencesDialogComponent, {\n        data: {},\n        width: '990px'\n      });\n      this.overlayContainer.style.zIndex = '1002';\n      const dialogSubscription = dialogRef.afterClosed().subscribe(ref => {\n        this.overlayContainer.style.zIndex = null;\n       if (ref) {\n         if (ref.citation && ref.citation !== '' && ref.docType && ref.docType !== '') {\n          this.fillReference(ref);\n        }\n       }\n      });\n      this.subscriptions.push(dialogSubscription);\n    }\n\n    fillReference(ref: SubstanceReference) {\n      this.showPrev = false;\n      this.reference.access = ref.access;\n      this.reference.citation = ref.citation;\n      this.reference.deprecated = ref.deprecated;\n      this.reference.docType = ref.docType;\n      this.reference.publicDomain = ref.publicDomain;\n      this.reference.tags = ref.tags;\n      this.reference.uploadedFile = ref.uploadedFile;\n      this.reference.url = ref.url || null;\n      this.reference.id = ref.id || null;\n    }\n\n  downloadDocument(url: string): void {\n    this.substanceFormService.bypassUpdateCheck();\n    window.open(url);\n  }\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"references && references.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addSubstanceReference()\">\n    Add reference <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"reference\" *ngFor=\"let reference of paged; last as isLast\" [id]=\"reference.uuid\" appScrollToTarget>\n  <app-reference-form [reference]=\"reference\" (referenceDeleted)=\"deleteReference($event)\"></app-reference-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n<div *ngIf = \"references && references.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addSubstanceReference()\">\n        Add reference <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button> \n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RefernceFormDialogComponent } from './references-dialogs/refernce-form-dialog.component';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { SubstanceFormReferencesService } from './substance-form-references.service';\n\n@Component({\n  selector: 'app-substance-form-references-card',\n  templateUrl: './substance-form-references-card.component.html',\n  styleUrls: ['./substance-form-references-card.component.scss']\n})\nexport class SubstanceFormReferencesCardComponent extends SubstanceCardBaseFilteredList<SubstanceReference>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  references: Array<SubstanceReference>;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n\n  constructor(\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n    private overlayContainerService: OverlayContainer\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form references';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('References');\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  ngAfterViewInit() {\n    const referencesSubscription = this.substanceFormReferencesService.substanceReferences.subscribe(references => {\n      this.references = references;\n      this.filtered = references;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.references, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(referencesSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  openReferenceFormDialog(reference: SubstanceReference = { access: [] }): void {\n\n    const dialogRef = this.dialog.open(RefernceFormDialogComponent, {\n      data: reference,\n      width: '900px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newReference => {\n      this.overlayContainer.style.zIndex = null;\n      if (newReference != null && newReference.doctype && newReference.citation) {\n        this.substanceFormReferencesService.addSubstanceReference(newReference);\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  addItem(): void {\n    this.addSubstanceReference();\n  }\n\n  addSubstanceReference(): void {\n    const addedReference = this.substanceFormReferencesService.addSubstanceReference({});\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(addedReference.uuid, 'center');\n    }, 10);\n  }\n\n  deleteReference(reference: SubstanceReference): void {\n    this.substanceFormReferencesService.deleteSubstanceReference(reference);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormReferencesCardComponent } from './substance-form-references-card.component';\nimport { DynamicComponentLoaderModule } from '@gsrs-core/dynamic-component-loader';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ScrollToModule } from '@gsrs-core/scroll-to';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {ReferenceFormComponent} from \"./reference-form.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormReferencesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    ScrollToModule,\n    MatIconModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule\n  ],\n  exports:[\n    ReferenceFormComponent,\n  ],\n  declarations: [\n    SubstanceFormReferencesCardComponent,\n    ReferenceFormComponent\n  ]\n})\nexport class SubstanceFormReferencesModule { }\n"],"sourceRoot":"webpack:///","file":"2786.25acfd1ab27ebdeb.js"}