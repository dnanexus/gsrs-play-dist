{"version":3,"mappings":"yiBACEA,iBACEA,yBACAA,oBAA0CA,iDAASC,eACjDD,uBACFA,QACFA,+CAGEA,kBACEA,qBAAsDA,iDAASE,oBAC7DF,uBACFA,QACFA,SCGG,IAAMG,EAAb,eAAaA,EAAb,WAUE,WACUC,EACAC,EACAC,EACAC,EACAC,IAA0C,eAJ1CC,oBACAA,sCACAA,cACAA,+BACAA,4BAbAA,sBAAmB,IAAIC,MACxBD,iBAAa,EAGtBA,eAAW,EACXA,cAAU,EACVA,YAAQ,EACAA,mBAAqC,GAT/C,uCAkBE,WACEA,KAAKE,iBAAmBF,KAAKF,wBAAwBK,sBAGrDH,KAAKI,UAAUC,cAAe,EAG9BL,KAAKI,UAAUE,OAAS,CAAC,eAzB7B,6BA4BE,cA5BF,yBA+BE,WACEN,KAAKO,cAAcC,QAAQ,YACzBC,EAAaC,kBAjCnB,0BAqCE,SAAaJ,GACXN,KAAKI,UAAUE,OAASA,IAtC5B,2BAyCE,SAAcK,GACRA,IACFX,KAAKI,UAAUQ,QAAUD,EAEzBX,KAAKI,UAAUS,SAAWF,KA7ChC,wBAiDE,SAAWG,GACTd,KAAKI,UAAUU,KAAOA,IAlD1B,mBAqDE,WACE,SAAId,KAAKI,UAAUQ,UACdZ,KAAKI,UAAUS,YAvDxB,6BA8DE,WAAe,WACbb,KAAKI,UAAUW,cAAgBf,KAAKL,aAAaqB,UAC5ChB,KAAKI,UAAUQ,SACdZ,KAAKI,UAAUS,UACfb,KAAKI,UAAUa,aAMnBjB,KAAKJ,+BAA+BsB,uBAJpClB,KAAKmB,YAAcC,WAAW,WAC5BC,EAAKC,iBAAiBC,KAAKF,EAAKjB,YAC/B,OAtET,wBA4EE,WACEoB,aAAaxB,KAAKmB,oBACXnB,KAAKI,UAAUW,cACtBf,KAAKJ,+BAA+BsB,yBA/ExC,0BAkFE,SAAaO,GAAU,WACrBzB,KAAK0B,OAAQ,EACD,MAARD,IACFzB,KAAK2B,SAAU,EACf3B,KAAKL,aAAaiC,WAAWH,GAAMI,UAAU,YAC3CC,EAAK1B,UAAUa,aAAec,EAC9BD,EAAKH,SAAU,GAEd,YACDG,EAAKH,SAAU,EACfG,EAAKJ,OAAQ,OA5FrB,gCAkGE,WAAkB,WACRM,EAAYhC,KAAKH,OAAOoC,KAAKC,IAAmC,CACpEC,KAAM,GACNC,MAAO,UAETpC,KAAKE,iBAAiBmC,MAAMC,OAAS,OACrC,IAAMC,EAAqBP,EAAUQ,cAAcX,UAAU,YAC3DR,EAAKnB,iBAAiBmC,MAAMC,OAAS,KAClCG,GACEA,EAAI5B,UAA6B,KAAjB4B,EAAI5B,UAAmB4B,EAAI7B,SAA2B,KAAhB6B,EAAI7B,SAC7DS,EAAKqB,cAAcD,KAIvBzC,KAAKO,cAAcoC,KAAKJ,KAhH9B,2BAmHI,SAAcE,GACZzC,KAAK4C,UAAW,EAChB5C,KAAKI,UAAUE,OAASmC,EAAInC,OAC5BN,KAAKI,UAAUS,SAAW4B,EAAI5B,SAC9Bb,KAAKI,UAAUyC,WAAaJ,EAAII,WAChC7C,KAAKI,UAAUQ,QAAU6B,EAAI7B,QAC7BZ,KAAKI,UAAUC,aAAeoC,EAAIpC,aAClCL,KAAKI,UAAUU,KAAO2B,EAAI3B,KAC1Bd,KAAKI,UAAUa,aAAewB,EAAIxB,aAClCjB,KAAKI,UAAU0C,IAAML,EAAIK,KAAO,KAChC9C,KAAKI,UAAU2C,GAAKN,EAAIM,IAAM,OA7HpC,8BAgIE,SAAiBD,GACf9C,KAAKD,qBAAqBiD,oBAC1BC,OAAOhB,KAAKa,OAlIhBI,kDAAaxD,GAAsBH,oFAAtBG,EAAsByD,yxBDhBnC5D,iBACEA,uBAOAA,iBACEA,uBAMAA,0BACcA,uCAAgB6D,qBAC9B7D,QAEAA,4BACEA,mBAAmDA,kEAAnDA,QACFA,QAEAA,eACEA,gCAAoBA,qCAAa6D,oBACjC7D,QACFA,QACFA,QACFA,eA3BQA,iDAQ2BA,wCAMqEA,4CAK/CA,+CAIIA,gtDCRhDG,EAAb,uCCfEH,4BACEA,mBACFA,4BAFgBA,4BACuBA,2HAIzCA,2BAAqKA,uDAAQE,2CAE3KF,8BAFyDA,iDAA2C,mBAA3CA,CAA2C,aAA3CA,CAA2C,oDAKpGA,+BAAkCA,wDAFpCA,iBACEA,gCAA4CA,6DAAoB8D,qBAAyB9D,QACzFA,gCACFA,2CAHuEA,mBACjDA,8BAC8BA,iEAEpDA,2BAAqKA,uDAAQ+D,2CAE7K/D,8BAF2DA,iDAA2C,mBAA3CA,CAA2C,aAA3CA,CAA2C,+BCK/F,IAAMgE,EAAb,eAAaA,EAAb,YAQE,WACU3D,EACAC,EACA2D,EACDC,EACC3D,GAAyC,4BAEjD4D,qIAAMD,IANEC,mCACAA,WACAA,oBACDA,cACCA,4BAVFA,aAAaC,IAEbD,gBAAqC,GAW3CA,EAAKE,uBAAyB,4BAHmBF,EAbrD,oDAmBE,WACE1D,KAAK6D,iBAAiBtC,MAAK,GAC3BvB,KAAK8D,gBAAgBvC,KAAK,cAC1BvB,KAAKE,iBAAmBF,KAAKF,wBAAwBK,wBAtBzD,6BAyBE,WAAe,WACP4D,EAAyB/D,KAAKJ,+BAA+BoE,oBAAoBnC,UAAU,YAC/FC,EAAKmC,WAAaA,EAClBnC,EAAKoC,SAAWD,EAChB,IAAME,EAAqBrC,EAAKsC,cAAcC,aAAaxC,UAAU,YACnEC,EAAKwC,WAAWC,EAAOzC,EAAKmC,WAAYnC,EAAK8B,yBAC5C,YACDY,QAAQC,IAAI/C,KAEdI,EAAKvB,cAAcoC,KAAKwB,GACxBrC,EAAK4C,KAAO,EACZ5C,EAAK6C,eAGDC,EAAsB5E,KAAKJ,+BAA+BiF,sBAAsBC,MAAKC,OAAK,IAAIlD,UAAU,YAC5GC,EAAK+C,sBAAwBA,IAG/B7E,KAAKO,cAAcoC,KAAKoB,GACxB/D,KAAKO,cAAcoC,KAAKiC,KA5C5B,yBA+CE,WACE5E,KAAKgF,mBAAmBzD,OACxBvB,KAAKO,cAAcC,QAAQ,YACzBC,EAAaC,kBAlDnB,qBAqDE,WACEV,KAAKiF,0BAtDT,mCAyDE,WAAqB,WACbC,EAAiBlF,KAAKJ,+BAA+BqF,sBAAsB,IACjFjF,KAAKmF,WAAWD,EAAeE,MAE/BhE,WAAW,WACTU,EAAK0B,gBAAgB6B,gBAAgBH,EAAeE,KAAM,WACzD,MA/DP,6BAkEE,SAAgBhF,GACdJ,KAAKJ,+BAA+B0F,yBAAyBlF,KAnEjE,wBAsEE,SAAWgF,GAAY,WACrBpF,KAAKuF,eAAevF,KAAK6E,sBAAsBW,WAAWC,OAAQL,GAClEpF,KAAK2D,WAAW+B,IAAI,YAAK,aAA+B,QAA/BC,IAAKd,sBAAsBe,UAAIC,eAAEC,UAAStF,QAAQ,YACrEsF,GACFA,EAAQtF,QAAQ,SAACiF,GACfM,EAAKR,eAAeE,EAAQL,OAKlCpF,KAAKJ,+BAA+BsB,yBAhFxC,4BAmFE,SAAeuE,EAAaL,GACrBK,EAAOxB,aACVwB,EAAOxB,WAAa,KAGkB,IAApCwB,EAAOxB,WAAW+B,QAAQZ,IAC5BK,EAAOxB,WAAWtB,KAAKyC,OAzF7Ba,GAAoEC,kDAAvD3C,GAA8ChE,mFAA9CgE,EAA8CJ,yrBDlB3D5D,iBACEA,kCAGAA,kBACFA,QACAA,iCAGAA,uBAIAA,wCAZyDA,oEAKzCA,2DAG6BA,kCAI7BA,yxBCKHgE,EAAb,qCCmBa4C,aAAb,eAAaA,KAAbC,iFAAaD,4DApBF,CACPE,KACAC,cAAsC/C,GACtCgD,IACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,IACAC,KACAC,SAOSd,EAAb","names":["i0","ctx_r2","ctx_r4","ReferenceFormComponent","utilsService","substanceFormReferencesService","dialog","overlayContainerService","substanceFormService","this","EventEmitter","overlayContainer","getContainerElement","reference","publicDomain","access","subscriptions","forEach","subscription","unsubscribe","event","docType","citation","tags","$$deletedCode","newUUID","uploadedFile","emitReferencesUpdate","deleteTimer","setTimeout","n","referenceDeleted","emit","clearTimeout","file","error","loading","uploadFile","subscribe","r","response","dialogRef","open","PreviousReferencesDialogComponent","data","width","style","zIndex","dialogSubscription","afterClosed","ref","fillReference","push","showPrev","deprecated","url","id","bypassUpdateCheck","window","c","selectors","ctx","ctx_r9","ctx_r11","SubstanceFormSimplifiedReferencesCardComponent","scrollToService","gaService","f","domainKeys","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","referencesSubscription","substanceReferences","references","filtered","searchSubscription","searchControl","valueChanges","filterList","value","console","log","page","pageChange","domainsSubscription","domainsWithReferences","pipe","take","componentDestroyed","addSubstanceReference","addedReference","applyToAll","uuid","scrollToElement","deleteSubstanceReference","applyReference","definition","domain","map","l","key","_a","domains","a","indexOf","t","SubstanceCardBaseFilteredList","SubstanceFormSimplifiedReferencesModule","u","CommonModule","DynamicComponentLoaderModule","MatDividerModule","ScrollToModule","MatIconModule","MatButtonModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceFormModule","MatTooltipModule"],"sources":["./src/app/core/substance-form/simplified-references/reference-form.component.html","./src/app/core/substance-form/simplified-references/reference-form.component.ts","./src/app/core/substance-form/simplified-references/substance-form-simplified-references-card.component.html","./src/app/core/substance-form/simplified-references/substance-form-simplified-references-card.component.ts","./src/app/core/substance-form/simplified-references/substance-form-simplified-references.module.ts"],"sourcesContent":["<div class=\"reference-form-container\">\n  <div *ngIf=\"reference.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n\n  <div class=\"form-row\">\n    <div class=\"delete-container\" *ngIf=\"reference.uuid\">\n      <button mat-icon-button matTooltip=\"Delete reference\" (click)=\"deleteReference()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n\n    <app-cv-input required = 'true' class=\"source-type\" domain = 'DOCUMENT_TYPE'  title = \"Source Type\" [model] = \"reference.docType\"\n                  (valueChange)= \"setSourceType($event)\">\n    </app-cv-input>\n\n    <mat-form-field class=\"citation\">\n      <input matInput placeholder=\"Source Text/Citation\" [(ngModel)]=\"reference.citation\" required name=\"citation\" />\n    </mat-form-field>\n\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"reference.access\">\n      </app-access-manager>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { SubstanceReference } from '@gsrs-core/substance';\nimport { ControlledVocabularyService } from '@gsrs-core/controlled-vocabulary';\nimport { UtilsService } from '@gsrs-core/utils';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PreviousReferencesDialogComponent } from '@gsrs-core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component';\nimport { Subscription } from 'rxjs';\nimport {SubstanceFormReferencesService} from \"@gsrs-core/substance-form/references/substance-form-references.service\";\n\n@Component({\n  selector: 'app-reference-form',\n  templateUrl: './reference-form.component.html',\n  styleUrls: ['./reference-form.component.scss']\n})\nexport class ReferenceFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() reference: SubstanceReference;\n  @Output() referenceDeleted = new EventEmitter<SubstanceReference>();\n  @Input() hideDelete = false;\n  private overlayContainer: HTMLElement;\n  deleteTimer: any;\n  showPrev = false;\n  loading = false;\n  error = false;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private utilsService: UtilsService,\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n\n    // Private domain by default.\n    this.reference.publicDomain = false;\n\n    // Protected access by default.\n    this.reference.access = [\"protected\"]\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.reference.access = access;\n  }\n\n  setSourceType(event?: any): void {\n    if (event) {\n      this.reference.docType = event;\n      // Mirror source type to citation.\n      this.reference.citation = event\n    }\n  }\n\n  updateTags(tags: Array<string>): void {\n    this.reference.tags = tags;\n  }\n\n  get isValid(): boolean {\n    if (this.reference.docType\n      && this.reference.citation) {\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteReference(): void {\n    this.reference.$$deletedCode = this.utilsService.newUUID();\n    if (!this.reference.docType\n      && !this.reference.citation\n      && !this.reference.uploadedFile\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.referenceDeleted.emit(this.reference);\n      }, 2000);\n    } else {\n      this.substanceFormReferencesService.emitReferencesUpdate();\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.reference.$$deletedCode;\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  fileSelected(file: File): void {\n    this.error = false;\n    if (file != null) {\n      this.loading = true;\n      this.utilsService.uploadFile(file).subscribe(response => {\n        this.reference.uploadedFile = response;\n        this.loading = false;\n\n      }, error => {\n        this.loading = false;\n        this.error = true;\n\n      });\n    }\n  }\n\n  openPreviousDialog(): void {\n      const dialogRef = this.dialog.open(PreviousReferencesDialogComponent, {\n        data: {},\n        width: '990px'\n      });\n      this.overlayContainer.style.zIndex = '1002';\n      const dialogSubscription = dialogRef.afterClosed().subscribe(ref => {\n        this.overlayContainer.style.zIndex = null;\n       if (ref) {\n         if (ref.citation && ref.citation !== '' && ref.docType && ref.docType !== '') {\n          this.fillReference(ref);\n        }\n       }\n      });\n      this.subscriptions.push(dialogSubscription);\n    }\n\n    fillReference(ref: SubstanceReference) {\n      this.showPrev = false;\n      this.reference.access = ref.access;\n      this.reference.citation = ref.citation;\n      this.reference.deprecated = ref.deprecated;\n      this.reference.docType = ref.docType;\n      this.reference.publicDomain = ref.publicDomain;\n      this.reference.tags = ref.tags;\n      this.reference.uploadedFile = ref.uploadedFile;\n      this.reference.url = ref.url || null;\n      this.reference.id = ref.id || null;\n    }\n\n  downloadDocument(url: string): void {\n    this.substanceFormService.bypassUpdateCheck();\n    window.open(url);\n  }\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"references && references.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"reference\" *ngFor=\"let reference of paged; last as isLast\" [id]=\"reference.uuid\" appScrollToTarget>\n  <app-reference-form [reference]=\"reference\" (referenceDeleted)=\"deleteReference($event)\"></app-reference-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"references && references.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { Subscription } from 'rxjs';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport {SubstanceFormReferencesService} from \"@gsrs-core/substance-form/references/substance-form-references.service\";\nimport {DomainsWithReferences} from \"@gsrs-core/substance-form/references/domain-references/domain.references.model\";\nimport { domainKeys } from '../references/domain-references/domain-keys.constant';\nimport {take} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-substance-form-references-card',\n  templateUrl: './substance-form-simplified-references-card.component.html',\n  styleUrls: ['./substance-form-simplified-references-card.component.scss']\n})\nexport class SubstanceFormSimplifiedReferencesCardComponent extends SubstanceCardBaseFilteredList<SubstanceReference>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  references: Array<SubstanceReference>;\n  private domainKeys = domainKeys;\n  private domainsWithReferences: DomainsWithReferences;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n\n  constructor(\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n    private overlayContainerService: OverlayContainer\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form references';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('References');\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  ngAfterViewInit() {\n    const referencesSubscription = this.substanceFormReferencesService.substanceReferences.subscribe(references => {\n      this.references = references;\n      this.filtered = references;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.references, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n\n    const domainsSubscription = this.substanceFormReferencesService.domainsWithReferences.pipe(take(1)).subscribe(domainsWithReferences => {\n      this.domainsWithReferences = domainsWithReferences;\n    });\n\n    this.subscriptions.push(referencesSubscription);\n    this.subscriptions.push(domainsSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n  addItem(): void {\n    this.addSubstanceReference();\n  }\n\n  addSubstanceReference(): void {\n    const addedReference = this.substanceFormReferencesService.addSubstanceReference({});\n    this.applyToAll(addedReference.uuid)\n\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(addedReference.uuid, 'center');\n    }, 10);\n  }\n\n  deleteReference(reference: SubstanceReference): void {\n    this.substanceFormReferencesService.deleteSubstanceReference(reference);\n  }\n\n  applyToAll(uuid: string): void {\n    this.applyReference(this.domainsWithReferences.definition.domain, uuid);\n    this.domainKeys.map(key=>this.domainsWithReferences[key]?.domains).forEach(domains => {\n      if (domains) {\n        domains.forEach((domain: any) => {\n          this.applyReference(domain, uuid);\n        });\n      }\n    });\n\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  applyReference(domain: any, uuid: string): void {\n    if (!domain.references) {\n      domain.references = [];\n    }\n\n    if (domain.references.indexOf(uuid) === -1) {\n      domain.references.push(uuid);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormSimplifiedReferencesCardComponent } from './substance-form-simplified-references-card.component';\nimport { DynamicComponentLoaderModule } from '@gsrs-core/dynamic-component-loader';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ScrollToModule } from '@gsrs-core/scroll-to';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {ReferenceFormComponent} from \"./reference-form.component\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormSimplifiedReferencesCardComponent),\n    MatDividerModule,\n    ScrollToModule,\n    MatIconModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceFormModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    SubstanceFormSimplifiedReferencesCardComponent,\n    ReferenceFormComponent\n  ]\n})\nexport class SubstanceFormSimplifiedReferencesModule { }\n"],"sourceRoot":"webpack:///","file":"3298.071f223b7db4ed2b.js"}