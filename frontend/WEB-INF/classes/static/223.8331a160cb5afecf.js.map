{"version":3,"mappings":"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","names":["i0","ctx_r2","ctx_r4","NameFormComponent","cvService","utilsService","dialog","substanceFormService","overlayContainerService","nameFormService","g","this","EventEmitter","FormControl","overlayContainer","getContainerElement","definition","subscribe","t","substanceType","def","substanceClass","unsubscribe","privateName","access","subscriptions","forEach","subscription","viewFull","set","val","showStd","name","languages","length","type","event","displayName","value","priorityUpdate","emit","domains","jurisdiction","nameJurisdiction","$$deletedCode","newUUID","deleteTimer","setTimeout","nameDeleted","clearTimeout","dialogRef","open","NameResolverDialogComponent","height","width","data","style","zIndex","afterClosed","molfile","resolvedName","nameOrgs","key","preventDefault","selectors","ctx","ctx_r10","ctx_r12","ctx_r13","SubstanceFormSimplifiedNamesCardComponent","substanceFormNamesService","scrollToService","gaService","configService","m","analyticsEventCategory","menuLabelUpdate","appId","environment","standardizeButton","configData","showNameStandardizeButton","definitionSubscription","level","definitionType","o","hiddenStateUpdate","canAddItemUpdate","push","namesSubscription","substanceNames","names","filtered","searchSubscription","searchControl","valueChanges","filterList","console","log","error","page","pageChange","componentDestroyed","addName","addSubstanceName","scrollToElement","updatedName","deleteSubstanceName","SubstanceCardBaseFilteredList","SubstanceFormSimplifiedNamesModule","f","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","MatRadioModule","MatCheckboxModule","MatExpansionModule","MatTableModule","MatBadgeModule","MatSelectModule","MatTooltipModule","ElementLabelDisplayModule"],"sources":["./src/app/core/substance-form/simplified-names/name-form.component.html","./src/app/core/substance-form/simplified-names/name-form.component.ts","./src/app/core/substance-form/simplified-names/substance-form-simplified-names-card.component.html","./src/app/core/substance-form/simplified-names/substance-form-simplified-names-card.component.ts","./src/app/core/substance-form/simplified-names/substance-form-simplified-names.module.ts"],"sourcesContent":["<div class=\"name-form-container\" [ngClass] = \"!viewFull? 'collapse':'name-form-container'\" >\n  <div *ngIf=\"name.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete name\" (click)=\"deleteName()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n\n    <mat-form-field class=\"name\">\n      <textarea matInput class=\"text-area\" placeholder=\"Name\" [(ngModel)]=\"name.name\" required name=\"name\" (keypress)=\"preventNewLine($event)\"></textarea>\n    </mat-form-field>\n\n    <a class=\"resolve\" *ngIf=\"name.name && name.name.length > 0 && substanceType === 'structure'\"\n       (click)=\"resolve()\">resolve</a>\n\n    <app-cv-input required='true' class=\"name-type\" key=\"Name Type Code\" title=\"Type\" [model]=\"name.type\"\n      (valueChange)=\"name.type = $event\">\n    </app-cv-input>\n\n    <div>\n      <app-access-manager  (accessOut)=\"updateAccess($event)\" [access]=\"name.access\">\n      </app-access-manager>\n    </div>\n  </div>\n</div>\n\n\n","import {Component, OnInit, Input, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {SubstanceName, SubstanceNameOrg} from '../../substance/substance.model';\nimport {ControlledVocabularyService} from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport {FormControl} from '@angular/forms';\nimport {MatRadioChange} from '@angular/material/radio';\nimport {UtilsService} from '../../utils/utils.service';\nimport {Subscription} from 'rxjs';\nimport {NameResolverDialogComponent} from '@gsrs-core/name-resolver/name-resolver-dialog.component';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {MatDialog} from '@angular/material/dialog';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {SubstanceFormNamesService} from '@gsrs-core/substance-form/names/substance-form-names.service';\n\n@Component({\n  selector: 'app-name-form',\n  templateUrl: './name-form.component.html',\n  styleUrls: ['./name-form.component.scss']\n})\nexport class NameFormComponent implements OnInit, OnDestroy {\n  private privateName: SubstanceName;\n  @Output() priorityUpdate = new EventEmitter<SubstanceName>();\n  @Output() nameDeleted = new EventEmitter<SubstanceName>();\n  nameControl = new FormControl('');\n  nameTypeControl = new FormControl('');\n  deleteTimer: any;\n  private subscriptions: Array<Subscription> = [];\n  overlayContainer: HTMLElement;\n  substanceType = '';\n  viewFull = true;\n  showStd = false;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService,\n    private dialog: MatDialog,\n    private substanceFormService: SubstanceFormService,\n    private overlayContainerService: OverlayContainer,\n    private nameFormService: SubstanceFormNamesService\n  ) {\n  }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    const definition = this.substanceFormService.definition.subscribe(def => {\n      this.substanceType = def.substanceClass;\n    });\n    definition.unsubscribe();\n\n    // Protected access by default.\n    this.privateName.access = [\"protected\"]\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set show(val: boolean) {\n    if (val != null) {\n      this.viewFull = val;\n    }\n  }\n\n  get show(): boolean {\n    return this.viewFull || null;\n  }\n\n  @Input()\n  set standardized(val: boolean) {\n    if (val != null) {\n      this.showStd = val;\n    }\n  }\n\n  get standardized(): boolean {\n    return this.showStd;\n  }\n\n  @Input()\n  set name(name: SubstanceName) {\n    if (name != null) {\n      this.privateName = name;\n      if (!this.privateName.languages || this.privateName.languages.length === 0) {\n        this.privateName.languages = ['en'];\n      }\n      if (!this.privateName.type) {\n        this.privateName.type = 'cn';\n      }\n    }\n  }\n\n  get name(): SubstanceName {\n    return this.privateName || {};\n  }\n\n  priorityUpdated(event: MatRadioChange) {\n    this.privateName.displayName = (event.value === 'true');\n    this.priorityUpdate.emit(this.privateName);\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.privateName.access = access;\n  }\n\n  updateLanguages(languages: Array<string>): void {\n    this.privateName.languages = languages;\n  }\n\n  updateDomains(domains: Array<string>): void {\n    this.privateName.domains = domains;\n  }\n\n  updateJurisdiction(jurisdiction: Array<string>): void {\n    this.privateName.nameJurisdiction = jurisdiction;\n  }\n\n  deleteName(): void {\n    this.privateName.$$deletedCode = this.utilsService.newUUID();\n\n    if (!this.privateName.name\n      && !this.privateName.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.nameDeleted.emit(this.privateName);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateName.$$deletedCode;\n  }\n\n  resolve(): void {\n    const dialogRef = this.dialog.open(NameResolverDialogComponent, {\n      height: 'auto',\n      width: '800px',\n      data: {'name': this.privateName.name}\n    });\n    this.overlayContainer.style.zIndex = '1002';\n    dialogRef.afterClosed().subscribe((molfile?: string) => {\n      this.overlayContainer.style.zIndex = null;\n      if (molfile != null && molfile !== '') {\n        this.substanceFormService.resolvedName(molfile);\n      }\n    }, () => {\n    });\n  }\n\n  getNameOrgs(name: SubstanceName): Array<SubstanceNameOrg> {\n    if (!name.nameOrgs) {\n      name.nameOrgs = [];\n    }\n    return name.nameOrgs as Array<SubstanceNameOrg>;\n  }\n\n  preventNewLine(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n  }\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"names && names.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n</div>\n\n<mat-paginator *ngIf=\"names && names.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"name\" *ngFor=\"let name of paged; last as isLast; index as index\" appScrollToTarget [id]=\"'substance-name-' + index\">\n  <app-name-form [name]=\"name\" (priorityUpdate)=\"priorityUpdated($event)\" (nameDeleted)=\"deleteName($event)\" [standardized] = \"showStd\"></app-name-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"names && names.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceName } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '@gsrs-core/google-analytics';\nimport { Subscription } from 'rxjs';\nimport { ConfigService } from '@gsrs-core/config';\nimport {SubstanceFormNamesService} from \"@gsrs-core/substance-form/names/substance-form-names.service\";\n\n@Component({\n  selector: 'app-substance-form-names-card',\n  templateUrl: './substance-form-simplified-names-card.component.html',\n  styleUrls: ['./substance-form-simplified-names-card.component.scss']\n})\nexport class SubstanceFormSimplifiedNamesCardComponent\n  extends SubstanceCardBaseFilteredList<SubstanceName>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  names: Array<SubstanceName>;\n  private subscriptions: Array<Subscription> = [];\n  pageSize = 10;\n  showStd = true;\n  appId: string;\n  standardizeButton = false;\n\n  constructor(\n    private substanceFormNamesService: SubstanceFormNamesService,\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n    private configService: ConfigService,\n\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form names';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Substance Names');\n    this.appId = this.configService.environment.appId;\n    this.standardizeButton = this.configService.configData.showNameStandardizeButton || false;\n    const definitionSubscription = this.substanceFormService.definition.subscribe( level => {\n      if (level.definitionType && level.definitionType === 'ALTERNATIVE') {\n      //  this.canAddItemUpdate.emit(false);\n        this.hiddenStateUpdate.emit(true);\n      } else {\n        this.canAddItemUpdate.emit(true);\n        this.hiddenStateUpdate.emit(false);\n      }\n      });\n    this.subscriptions.push(definitionSubscription);\n    const namesSubscription = this.substanceFormNamesService.substanceNames.subscribe(names => {\n      this.names = names;\n      this.filtered = names;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.names, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(namesSubscription);\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  standardize(): void {\n    // We currently only want the back-end to standardize names\n   // this.substanceFormNamesService.standardizeNames();\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addName();\n  }\n\n  addName(): void {\n    this.substanceFormNamesService.addSubstanceName();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-name-0`, 'center');\n    });\n  }\n\n  priorityUpdated(updatedName: SubstanceName): void {\n    this.names.forEach(name => {\n      if (name !== updatedName) {\n        name.displayName = false;\n      }\n    });\n  }\n\n  deleteName(name: SubstanceName): void {\n    this.substanceFormNamesService.deleteSubstanceName(name);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormSimplifiedNamesCardComponent } from './substance-form-simplified-names-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { NameFormComponent } from './name-form.component';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { ElementLabelDisplayModule } from '@gsrs-core/utils/element-label-display.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormSimplifiedNamesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatTableModule,\n    MatBadgeModule,\n    MatSelectModule,\n    MatTooltipModule,\n    ElementLabelDisplayModule\n  ],\n  declarations: [\n    SubstanceFormSimplifiedNamesCardComponent,\n    NameFormComponent,\n  ]\n})\nexport class SubstanceFormSimplifiedNamesModule { }\n"],"sourceRoot":"webpack:///","file":"223.8331a160cb5afecf.js"}